% GSA code v1.1.
% Generated by Esmat Rashedi, 2010. 
% "	E. Rashedi, H. Nezamabadi-pour and S. Saryazdi,
%�GSA: A Gravitational Search Algorithm�, Information sciences, vol. 179,
%no. 13, pp. 2232-2248, 2009."
%
% This function calculates the value of the objective function.
function fit=test_functions(L,F_index,dim)

%Insert your own objective function with a new F_index.
M = readRotationMatrix(F_index,dim);
sigma = readSigma(F_index,dim);


if F_index==1

    
    fit = f(F_index, M * transpose(L - sigma), dim) + F_index * 100;

end

if F_index==2 
    fit = f(F_index, M * transpose(L - sigma), dim) + F_index * 100;
end

if F_index==3
    fit = f(F_index, M * transpose(L - sigma), dim) + F_index * 100;
end

if F_index==4 
   fit = f(F_index, M * transpose((2.048*(L - sigma))/100) + ones(dim,1), dim) + 800;
end

if F_index==5
    fit = f(F_index, M * transpose(L - sigma), dim) + F_index * 100;
end

if F_index==6
    fit = f(F_index, M * transpose((L - sigma)/200), dim) + F_index * 100;
end

if F_index==7
   fit = f(F_index, M * transpose(6*(L - sigma)), dim) + F_index * 100;
end

if F_index==8
    fit = f(F_index, (5.12*(L - sigma)/100), dim) + 700;
end

if F_index==9
    fit = f(8, M * transpose(5.12*(L - sigma)/100), dim) + F_index * 100;
end

if F_index==10
    fit = f(9, M * transpose(1000*(L - sigma)/100), dim) + F_index * 100;

end

if F_index==11
    fit = f(9, M * transpose(1000*(L - sigma)/100), dim) + F_index * 100;

end

if F_index==12
    fit = f(10, M * transpose(5*(L - sigma)/100), dim) + F_index * 100;
end
if F_index==13
    fit = f(11, M * transpose(5*(L - sigma)/100), dim) + F_index * 100;
end

if F_index==14
fit = f(12, M * transpose(5*(L - sigma)/100), dim) + F_index * 100;
end

if F_index==15
    fit = f(13, M * transpose(5*(L - sigma)/100) + ones(dim,1) , dim) + F_index * 100;end

if F_index==16
    fit = f(14, M * transpose(L - sigma) + ones(dim,1), dim) + F_index * 100;
end

if F_index==17
        p = [0.3, 0.3, 0.4];
        
        L1 = L(1:p(1) * dim);
        L2 = L(p(1) * dim + 1: (p(1)+p(2)) * dim);
        L3 = L((p(1)+p(2)) * dim + 1: dim);
        
        [~, size1] = size(L1);
        [~, size2] = size(L2);
        [~, size3] = size(L3);
        
        
        
        M1 = M(:,1:p(1) * dim);
        M2 = M(:,p(1) * dim + 1: (p(1)+p(2)) * dim);
        M3 = M(:,(p(1)+p(2)) * dim + 1: dim);
        
        
        sigma1 = sigma(1:p(1) * dim);
        sigma2 = sigma(p(1) * dim + 1: (p(1)+p(2)) * dim);
        sigma3 = sigma((p(1)+p(2)) * dim + 1: dim);
        
        fit = 0;
        
        fit = fit + f(9, M1 * transpose(L1 - sigma1), size1) + 2 * 100;
        fit = fit + f(8, (5.12*(L2 - sigma2)/100), size2) + 700;
        fit = fit + f(1, M3 * transpose(L3 - sigma3), size3) + 100;
end

if F_index==18
    p = [0.3, 0.3, 0.4];
    L1 = L(1:p(1) * dim);
    L2 = L(p(1) * dim + 1: (p(1)+p(2)) * dim);
    L3 = L((p(1)+p(2)) * dim + 1: dim);
    
    [~, size1] = size(L1);
    [~, size2] = size(L2);
    [~, size3] = size(L3);
    
        
    M1 = M(:,1:p(1) * dim);
    M2 = M(:,p(1) * dim + 1: (p(1)+p(2)) * dim);
    M3 = M(:,(p(1)+p(2)) * dim + 1: dim);
        
    sigma1 = sigma(1:p(1) * dim);
    sigma2 = sigma(p(1) * dim + 1: (p(1)+p(2)) * dim);
    sigma3 = sigma((p(1)+p(2)) * dim + 1: dim);
        
    fit = 0;
        
    fit = fit + f(2, M1 * transpose(L1 - sigma1), size1) + 200;
    fit = fit + f(12,M2 * transpose(5*(L2 - sigma2)/100) , size2) + 1200;
    fit = fit + f(8, (5.12*(L3 - sigma3)/100), size3) + 700;
end

if F_index==19
    p = [0.2, 0.2, 0.3, 0.3];
    L1 = L(1:p(1) * dim);
    L2 = L(p(1) * dim + 1: (p(1)+p(2)) * dim);
    L3 = L((p(1)+p(2)) * dim + 1: (p(1)+p(2) + p(3)) * dim);
    L4 = L((p(1)+p(2) + p(3)) * dim + 1: dim);
    
    [~, size1] = size(L1);
    [~, size2] = size(L2);
    [~, size3] = size(L3);
    [~, size4] = size(L4);
    
        
    M1 = M(:,1:p(1) * dim);
    M2 = M(:,p(1) * dim + 1: (p(1)+p(2)) * dim);
    M3 = M(:,(p(1)+p(2)) * dim + 1: (p(1)+p(2) + p(3)) * dim);
    M4 = M(:,(p(1)+p(2) + p(3)) * dim + 1: dim);
        
    sigma1 = sigma(1:p(1) * dim);
    sigma2 = sigma(p(1) * dim + 1: (p(1)+p(2)) * dim);
    sigma3 = sigma((p(1)+p(2)) * dim + 1: (p(1)+p(2) + p(3)) * dim);
    sigma4 = sigma((p(1)+p(2) + p(3)) * dim + 1: dim);
    
        
    fit = 0;
    
    fit = fit + f(7, M1 * transpose(6*(L1 - sigma1)), size1) + 7 * 100;
    fit = fit + f(6, M2 * transpose((L2 - sigma2)/200), size2) + 6 * 100;
    fit = fit + f(4, M3 * transpose((2.048*(L3 - sigma3))/100) + ones(dim,1), size3) + 800;
    fit = fit + f(12, M4 * transpose(5*(L4 - sigma4)/100), size4) + 14 * 100;
end

if F_index==20
    p = [0.2, 0.2, 0.3, 0.3];
    L1 = L(1:p(1) * dim);
    L2 = L(p(1) * dim + 1: (p(1)+p(2)) * dim);
    L3 = L((p(1)+p(2)) * dim + 1: (p(1)+p(2) + p(3)) * dim);
    L4 = L((p(1)+p(2) + p(3)) * dim + 1: dim);
    
    [~, size1] = size(L1);
    [~, size2] = size(L2);
    [~, size3] = size(L3);
    [~, size4] = size(L4);
    
        
    M1 = M(:,1:p(1) * dim);
    M2 = M(:,p(1) * dim + 1: (p(1)+p(2)) * dim);
    M3 = M(:,(p(1)+p(2)) * dim + 1: (p(1)+p(2) + p(3)) * dim);
    M4 = M(:,(p(1)+p(2) + p(3)) * dim + 1: dim);
        
    sigma1 = sigma(1:p(1) * dim);
    sigma2 = sigma(p(1) * dim + 1: (p(1)+p(2)) * dim);
    sigma3 = sigma((p(1)+p(2)) * dim + 1: (p(1)+p(2) + p(3)) * dim);
    sigma4 = sigma((p(1)+p(2) + p(3)) * dim + 1: dim);
    
        
    fit = 0;
    
    fit = fit + f(12, M1 * transpose(5*(L1 - sigma1)/100), size1) + 14 * 100;
    fit = fit + f(3, M2 * transpose(L2 - sigma2), size2) + 3 * 100;
    fit = fit + f(11, M3 * transpose(5*(L3 - sigma3)/100), size3) + 13 * 100;
    fit = fit + f(8, (5.12*(L4 - sigma4)/100), size4) + 700;
end

aSH=[4 4 4 4;1 1 1 1;8 8 8 8;6 6 6 6;3 7 3 7;2 9 2 9;5 5 3 3;8 1 8 1;6 2 6 2;7 3.6 7 3.6];
cSH=[.1 .2 .2 .4 .4 .6 .3 .7 .5 .5];

if F_index==21
    fit=0;
  for i=1:5
    fit=fit-((L-aSH(i,:))*(L-aSH(i,:))'+cSH(i))^(-1);
  end
end

if F_index==22
    fit=0;
  for i=1:7
    fit=fit-((L-aSH(i,:))*(L-aSH(i,:))'+cSH(i))^(-1);
  end
end

if F_index==23
    fit=0;
  for i=1:10
    fit=fit-((L-aSH(i,:))*(L-aSH(i,:))'+cSH(i))^(-1);
  end
end

function y=Ufun(x,a,k,m)
y=k.*((x-a).^m).*(x>a)+k.*((-x-a).^m).*(x<(-a));
return